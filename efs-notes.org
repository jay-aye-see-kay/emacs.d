* Emacs from scratch notes

** Part 1: Packages and basic setup
- help commands
  - all start with =c-h=
- =c-x= =c-f=  find file
- =c-x c-b= find buffer
  
** Part 2: UI tweaks
- =c-x c-e= evaluate expression under point
- how do I eval a whole buffer?
- `use-package` has a `:diminish` option which stops hover info going into messages

** Part 3: Keybindings and evil mode
Built in ways to set keymaps:
#+begin_src emacs-lisp
  ;; create global keymap
  (global-set-key (kbd "C-x y z") 'function)
  ;; create mode keymap
  (define-key mode-name-map (kbd "C-x y z") 'function)
#+end_src

But normally we don't define these directly with `use-package` or `general.el`

** Part 4:  Projectile and Magit
- Projectile is a suite of commands like fzf in vim, all keybinds start with =C-c p=
- Open Magit status buffer with =C-x g=, everything happens from there
- Magit keybinds are mostly the same as fugitive, but will show help with =?= or with a partial keycombo, for example =c= will open completions and =c= again will commit
- Magit provides a =Instant Fixup= and =Branch spin off= commands on top of what git provides and they look super useful
- =Forge= looks worth setting up for creating/editing PRs and issues from emacs

** Part 5:  Org Mode basics
- create link with =c-c c-l= (the underlying text is =[[link][description]]=)
- follow link with =c-c c-o=
- surrounding astrixes make *bold* and slashes make /italic/
- headings with leading astrix(es) =*=
- ordered, unordered, and check lists the same as markdowns
- tables are same as markdown
- code blocks:
#+begin_src emacs-lisp
  (message "run\n me")
#+end_src

** Part 6:  Organise your life with Org Mode
- =M-x org-agenda a= to show agenda
- =C-c C-t= change task states
- =C-c C-s= schedule a task (=shift <arrow-key>= to select calendars)

#+begin_src emacs-lisp
  (setq org-todo-keywords
    ;; done states are after the "|", key in bracket is the shortcut for this state
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))
#+end_src

*** Making a custom agenda
- look up =org-agenda-custom-commands=

*** Tags
- add tags to an item with =councel-org-tags=
- add tags to the =org-tag-alist= variable to predefine them
- org mode's built in tags inteface is =org-set-tags-command= or =C-c C-q= (but this keybinding doesn't work right now?)

*** Refiling
#+begin_src emacs-lisp
  ;; specify files we can refile into, and the heading level we can refile into
  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)))

  ;; save all org files after refile
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

*** Capturing and capture templates
#+begin_src emacs-lisp
  ;; create a list of capture templates that will be attached to keybinds
  (setq org-capture-templates
    '(<list of templates to capture>))
#+end_src

*** Org habit
- Comes with org mode, but not enabled by default
- Create a =Habits.org=
- Create an item; add recurring schedule, mark it TODO, and add the habit property
- =org-habit= will add a column to the agenda view showing how you're sticking to the habit

** Part 7:  Configure everything with Org Mode
- skipped for now because the lsp bits look more interesting

*** Org babel 
=C-c C-c= to execute a code block
#+begin_src python :results output
  def greeting():
      return "Hello"
  print(greeting())
#+end_src

#+RESULTS:
: Hello

- once structured templates are setup =<el TAB= to insert =emacs-lisp=, =<py TAB= to insert python etc.
  
*** Tangled org mode files
- src blocks can be "tangled" from an org file into a config file or program
- e.g these two block will output =value\=somevalue=:

  #+Name: some-value
  #+begin_src emacs-lisp
    (+ 100 55)
  #+end_src

  #+begin_src conf :tangle .config/some-app.conf :noweb yes :mkdirp yes
    value=<<some-value()>>
  #+end_src

** Part 8:  Build your own IDE with lsp-mode
*** Base setup
- base packages are =lsp-mode= and =lsp-ui-mode=
- =lsp-ivy= provides some symbol search functions
- =company= provides completion as you type
- =company-box= makes it looks a bit nicer, things like icons next to comletion items
- The EFS company setup uses =tab= like VSCode does, not sure this is what I want

*** Language specific setup
- Most languages need explicit setup for language specific stuff light highlighting, but also manually connected to the lsp
- TypeScript requires the =typescript-mode= for =ts= and =tsx= files (but no syntax hl for tsx?)
- =tsx= seems to need =tree-sitter= for syntax highlighting
- =lsp-mode= works file with both =ts= and =tsx=
- some langs need a =lsp-<something>= package too

*** DAP mode
- yeah maybe later

** ON_HOLD Part 9: Terminal modes.
** IN_PROGRESS Part 10: Dired
*** Dired basics
- it just calls =ls= internally
- customise with =dired-listing-switches=
- open files with =g SOMETHING= (see which key for the options available)
- =(= toggles "high detail mode
  
*** marking/selection
- mark with =m=, unmark with =u=, unmark all with =U=
- =t= will invert the selection
- =%m= to mark files by regex
- =K= will kill marked files (hide them), refresh the buffer to see them again
- =C= to copy file(s), =R= to rename/move file(s)
- =C-M-j= is the =ivy-alt-done= command, can be useful when trying to rename and
  
*** dired keymaps
- =delete-by-moving-to-trash= will tell dired to move to trash instead of entirely deleting
- =Z= will compress or uncompress
- with selected files, press =c= to compress. Type of archieve is determinded by the file extension you give it
- =T= is touch/change timestamp, =M= is chmod, =O= is chown, =S= creates symlink
- =S-RET= opens file in new split, keeping dired open
- =M-RET= is the same as =S-RET= but leaves focus on dired window
  
*** TODO wdired
- change filenames in place
- activate with =C-x C-q= finish with =ZZ=
- why isn't his keybinding working?

*** new package: dired-single
- replaces old dired buffers with new ones to keep buffer list tidier

*** new package: all-the-icons-dired
- adds icons

*** TODO images
- will be showed by default but =&= will open selected file in an external program
- how do I return to =dired= after opening a file? =C-o= doesn't work (it goes to a different file)

** Misc Thoughts
*** Org
- the =S-M-RET= shortcut to create a new checklist item sucks, something better
- the =C-c C-x C-b= shortcut to toggle checklists sucks, and doesn't even add if required
- org agenda looses all evil keybinds, can I put some back it?

*** Magit
- it seems mostly intuitive but I should probably practice a bit more, just get the basics done

*** Other thoughts
- pulse on highlight can be implementeding with the built in package =pulse.el='s =(pulse-momentary-highlight-region START END)= [[https://blog.meain.io/2020/emacs-highlight-yanked/][see this blog post about setting it up]]

*** Copy and paste key combos (only in emacs mode)
- Thought: Should I remap the emacs copy paste keys to interact with the system clipboard and use vim's clipboard as normal? I need to know =C-y= regardless for Ivy mini buffers like =M-x=.
- Another thought: Evil is already using the system clipboard, do I want that?

| Common Name | Common Key | Emacs Name     | Emacs Key |
| Cut         | C-x        | Kill           | C-w       |
| Copy        | C-c        | kill-ring-save | M-w       |
| Paste       | C-v        | Yank           | C-y       |
| —           | —          | yank-pop       | M-y       |

*** Org mode format self

Idea is a work in progress and doesn't enforce the heading spacing I want, but it might be what I'm after? Will obviously need to attach this function to some sort of =on-save= event or a keypress.

#+begin_src emacs-lisp
  ;; This will format the current buffer file but then it's out of
  ;; sync with the visible buffer and needs to be re-read
  (org-export-to-file 'org buffer-file-name)

  ;; This will format the current buffer in place without touching the
  ;; file system so is probably what I want, the only issue I noticed
  ;; was that it opens a copy of the buffer.
  (org-export-to-buffer 'org (buffer-name))
#+end_src

*** Coping from EFS
- [ ] remove =command-log-mode=
- [ ] rename =efs= -> =jdr=
- [ ] setup tree sitter for typescript
- [ ] set up no-littering
- [ ] setup checkbox masking so they look pretty
- [ ] setup copy paste shortcuts (can I just use =C-c= in insert mode, and =C-v= in visual?
- [ ] update =lsp-mode= to use =SPC l= or =C-l= for keybinds
