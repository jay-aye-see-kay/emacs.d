* Emacs from scratch notes

** Part 1: Packages and basic setup
- help commands
  - all start with =c-h=
- =c-x= =c-f=  find file
- =c-x c-b= find buffer

** Part 2: UI tweaks
- =c-x c-e= evaluate expression under point
- how do I eval a whole buffer?
- `use-package` has a `:diminish` option which stops hover info going into messages

** Part 3: Keybindings and evil mode
Built in ways to set keymaps:
#+begin_src emacs-lisp
  ;; create global keymap
  (global-set-key (kbd "C-x y z") 'function)
  ;; create mode keymap
  (define-key mode-name-map (kbd "C-x y z") 'function)
#+end_src

But normally we don't define these directly with `use-package` or `general.el`

** Part 4:  Projectile and Magit
- Projectile is a suite of commands like fzf in vim, all keybinds start with =C-c p=
- Open Magit status buffer with =C-x g=, everything happens from there
- Magit keybinds are mostly the same as fugitive, but will show help with =?= or with a partial keycombo, for example =c= will open completions and =c= again will commit
- Magit provides a =Instant Fixup= and =Branch spin off= commands on top of what git provides and they look super useful
- =Forge= looks worth setting up for creating/editing PRs and issues from emacs

** Part 5:  Org Mode basics
- create link with =c-c c-l= (the underlying text is =[[link][description]]=)
- follow link with =c-c c-o=
- surrounding astrixes make *bold* and slashes make /italic/
- headings with leading astrix(es) =*=
- ordered, unordered, and check lists the same as markdowns
- tables are same as markdown
- code blocks:
#+begin_src emacs-lisp
(message "run\n me")
#+end_src


** Part 6:  Organise your life with Org Mode
- =M-x org-agenda a= to show agenda
- =C-c C-t= change task states
- =C-c C-s= schedule a task (=shift <arrow-key>= to select calendars)

#+begin_src emacs-lisp
(setq org-todo-keywords
  ;; done states are after the "|", key in bracket is the shortcut for this state
  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))
#+end_src

*** Making a custom agenda
- look up =org-agenda-custom-commands=

*** Tags
- add tags to an item with =councel-org-tags=
- add tags to the =org-tag-alist= variable to predefine them
- org mode's built in tags inteface is =org-set-tags-command= or =C-c C-q= (but this keybinding doesn't work right now?)

*** Refiling
#+begin_src emacs-lisp
  ;; specify files we can refile into, and the heading level we can refile into
  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)))

  ;; save all org files after refile
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src


*** Capturing and capture templates
#+begin_src emacs-lisp
  ;; create a list of capture templates that will be attached to keybinds
  (setq org-capture-templates
    '(<list of templates to capture>))
#+end_src

*** Org habit
- Comes with org mode, but not enabled by default
- Create a =Habits.org=
- Create an item; add recurring schedule, mark it TODO, and add the habit property
- =org-habit= will add a column to the agenda view showing how you're sticking to the habit

** ON_HOLD Part 7:  Configure everything with Org Mode
- skipped for now because the lsp bits look more interesting

** IN_PROGRESS Part 8:  Build your own IDE with lsp-mode

** Misc Thoughts
*** TODO setup undo tree so I can redo
*** Org
- the =S-M-RET= shortcut to create a new checklist item sucks, something better
- the =C-c C-x C-b= shortcut to toggle checklists sucks, and doesn't even add if required
- org agenda looses all evil keybinds, can I put some back it?

*** Magit
- it seems mostly intuitive but I should probably practice a bit more, just get the basics done

*** Other thoughts
- pulse on highlight can be implementeding with the built in package =pulse.el='s =(pulse-momentary-highlight-region START END)= [[https://blog.meain.io/2020/emacs-highlight-yanked/][see this blog post about setting it up]]

*** Copy and paste key combos (only in emacs mode)
- Thought: Should I remap the emacs copy paste keys to interact with the system clipboard and use vim's clipboard as normal? I need to know =C-y= regardless for Ivy mini buffers like =M-x=.
- Another thought: Evil is already using the system clipboard, do I want that?

| Common Name | Common Key | Emacs Name     | Emacs Key |
| Cut         | C-x        | Kill           | C-w       |
| Copy        | C-c        | kill-ring-save | M-w       |
| Paste       | C-v        | Yank           | C-y       |
| —           | —          | yank-pop       | M-y       |
