#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el

* About
This is the configuration was built following the [[https://systemcrafters.net/emacs-from-scratch/][Emacs From Scratch]] series, now written as an Org Mode document. This file generates the [[file:init.el][init.el]] which can be loaded by Emacs at startup.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run the following command interactively so that mode line icons display correctly:

=M-x all-the-icons-install-fonts=

* Performance stuff
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;;; Native comp setup -----------------------
;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(if (boundp 'native-comp-eln-load-path) 
    (add-to-list 'native-comp-eln-load-path
		 (expand-file-name "eln-cache/" user-emacs-directory)))

#+end_src

* use-package set up
[[https://github.com/jwiegley/use-package][use-package]] is a macro to group package install and configuration, it uses the built in =package.el= internally. Once I have things set up I'll switch to [[https://github.com/raxod502/straight.el][straight.el]] so I can commit versions of dependencies to version control.

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Visual clean ups
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(tooltip-mode -1)
(set-face-attribute 'default nil :font "Fira Mono" :height 120)
#+end_src

* Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src
